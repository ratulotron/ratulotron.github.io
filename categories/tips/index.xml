<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tips on Ratul.rants(about="xyz")</title><link>/categories/tips/</link><description>Recent content in tips on Ratul.rants(about="xyz")</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Ratul Minhaz</copyright><lastBuildDate>Fri, 27 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="/categories/tips/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting up Ember CLI Sass</title><link>/posts/2017-01-27-setup-ember-cli-sass/</link><pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate><guid>/posts/2017-01-27-setup-ember-cli-sass/</guid><description>Trying to set up Sass with Ember can be quiet problematic if you are using a version manager for Node. For example I was using a version manager called &amp;lsquo;n&amp;rsquo; and could not integrate Sass in anyway with my Ember app. It all boiled down to my Ember installation not finding libraries needed to compile Sass. These two modules were the reason of the problem: node-gyp and node-sass.
After fiddling around for a while I found out the proper way to setup Sass with Ember.</description><content>&lt;p>Trying to set up Sass with Ember can be quiet problematic if you are using a version manager for Node. For example I was using a version manager called &amp;lsquo;n&amp;rsquo; and could not integrate Sass in anyway with my Ember app. It all boiled down to my Ember installation not finding libraries needed to compile Sass. These two modules were the reason of the problem: node-gyp and node-sass.&lt;/p>
&lt;p>After fiddling around for a while I found out the proper way to setup Sass with Ember. First, ensure these are not installed in the project&amp;rsquo;s node_modules:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">npm uninstall node-gyp
npm uninstall node-sass
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then install them again with the right version on Node:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># switch to the latest version of Node&lt;/span>
n latest
npm install -g node-gyp
npm install -g node-sass
&lt;span style="color:#75715e"># this will install Ember addons for Sass&lt;/span>
ember install ember-cli-sass
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>If Gitignore does not ignore</title><link>/posts/2015-04-15-if-gitignore-does-not-ignore/</link><pubDate>Wed, 15 Apr 2015 11:03:31 +0000</pubDate><guid>/posts/2015-04-15-if-gitignore-does-not-ignore/</guid><description>Sometimes after changing your .gitignore the new (un)ignored files don&amp;rsquo;t get get behind the scenes, as you would have expected. The reason behind this is you have already committed the files that you added to .gitignore and now git is tracking the files. Unless you delete them git will keep an eye on any changes on those files as it would do with any other. To get the new .gitignore rule registered with the repo you will have to manually remove tho file(s) from git&amp;rsquo;s cache.</description><content>&lt;p>Sometimes after changing your .gitignore the new (un)ignored files don&amp;rsquo;t get get behind the scenes, as you would have expected. The reason behind this is you have already committed the files that you added to .gitignore and now git is tracking the files. Unless you delete them git will keep an eye on any changes on those files as it would do with any other. To get the new .gitignore rule registered with the repo you will have to manually remove tho file(s) from git&amp;rsquo;s cache. So here is what you need to do:&lt;/p>
&lt;p>First of all, YOU MUST COMMIT any staged progress, otherwise they will get lost.&lt;/p>
&lt;p>Then you can go on to removing the problematic files from git&amp;rsquo;s tracking. For only one file, you will have to run this commad and that&amp;rsquo;s it. Git will smartly ignore whatever you tell it to ignore:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git rm -r --cached &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But in case you have way too many files to mention one by one, you might want to remove all the files at once. In this case git will stop tracking all files, so you will also have to add them once again manually.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git rm -r --cached &amp;lt;file&amp;gt;
git add .
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lastly, simply commit again:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git commit -m &lt;span style="color:#e6db74">&amp;#34;fixed .gitignore&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tada, problem solved! If you ever want to undo this, just add the file to git:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git add &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>