<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tips on Ratul.rants(about="xyz")</title><link>/categories/tips/</link><description>Recent content in tips on Ratul.rants(about="xyz")</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Ratul Minhaz</copyright><lastBuildDate>Fri, 20 Jan 2023 23:00:00 +0000</lastBuildDate><atom:link href="/categories/tips/index.xml" rel="self" type="application/rss+xml"/><item><title>PyCharm's 'Unresolved reference' error on importing with full package path</title><link>/posts/pycharm-s-unresolved-reference-error-on-importing-with-full-package-path/</link><pubDate>Fri, 20 Jan 2023 23:00:00 +0000</pubDate><guid>/posts/pycharm-s-unresolved-reference-error-on-importing-with-full-package-path/</guid><description>If you use full path in the imports of your Python project, sometimes PyCharm can have trouble identifying the project structure and mark the root package name as &amp;ldquo;Unresolved reference&amp;rdquo; error. This is likely to happen when when the project was created manually and/or uses a dependency manager like Poetry.
For example, I have this project structure:
. ├── Dockerfile ├── docker-compose.yml ├── poetry.lock ├── pyproject.toml └── src ├── .airflowignore └── lei_pipeline ├── __init__.</description><content>&lt;p>If you use full path in the imports of your Python project, sometimes PyCharm can have trouble identifying the project structure and mark the root package name as &amp;ldquo;Unresolved reference&amp;rdquo; error. This is likely to happen when when the project was created manually and/or uses a dependency manager like Poetry.&lt;/p>
&lt;p>For example, I have this project structure:&lt;/p>
&lt;pre>&lt;code>.
├── Dockerfile
├── docker-compose.yml
├── poetry.lock
├── pyproject.toml
└── src
├── .airflowignore
└── lei_pipeline
├── __init__.py
├── dags
│   ├── __init__.py
│   └── download_latest_lei.py
└── utils
├── __init__.py
└── configs.py
&lt;/code>&lt;/pre>
&lt;p>In the &lt;code>./src/lei_pipeline/dags/download_latest_lei.py&lt;/code> file, I imported the variable &lt;code>LEI_URL_BASE_PATH&lt;/code> from &lt;code>./src/lei_pipeline/utils/configs.py&lt;/code> in the following manner, including the full package path:&lt;/p>
&lt;p>&lt;img src="/uploads/pycharm_project_root.png" alt="">&lt;/p>
&lt;p>This worked just as intended in the Docker image I was building to run Airflow. In the image, this &lt;code>lei_pipeline&lt;/code> directory is copied to the &lt;code>/opt/airflow/dags/&lt;/code> directory and Airflow easily picks up the necessary files.&lt;/p>
&lt;p>As you can see, PyCharm doesn&amp;rsquo;t consider the folder as a module, because it expects the module root to be the &lt;code>src&lt;/code> directory. So if the correct import path for this file would be &lt;code>src.lei_pipeline.utils.configs&lt;/code>. There can be many reasons why you wouldn&amp;rsquo;t use &lt;code>src&lt;/code> as your Python project&amp;rsquo;s root module, in my case I needed to have an &lt;code>.airflowignore&lt;/code> file in the root, and use the actual &lt;code>lei_pipeline&lt;/code> module to be imported in my Airflow Docker image&amp;rsquo;s &lt;code>dags&lt;/code> folder.&lt;/p>
&lt;p>The solution to this is actually pretty simple. All I did was marked the &lt;code>src&lt;/code> directory as my project source root in PyCharm. Just right click on the root folder and from &amp;ldquo;Mark directory as&amp;rdquo; set &amp;ldquo;Source Root&amp;rdquo;:&lt;/p>
&lt;p>&lt;img src="/uploads/pycharm_project_root_set.png" alt="">&lt;/p>
&lt;p>Et voilà! For me this was enough for PyCharm to start accurately!&lt;/p>
&lt;p>However, in some cases this might not be enough. PyCharm doesn&amp;rsquo;t always update it&amp;rsquo;s references, so you might need to force it to rebuild them. You can do this from &lt;code>File &amp;gt; Invalidate Caches&lt;/code>&lt;/p>
&lt;p>Hopefully this helps someone who has been Googling as cluelessly as I did!&lt;/p></content></item><item><title>Setting up Ember CLI Sass</title><link>/posts/2017-01-27-setup-ember-cli-sass/</link><pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate><guid>/posts/2017-01-27-setup-ember-cli-sass/</guid><description>Trying to set up Sass with Ember can be quiet problematic if you are using a version manager for Node. For example I was using a version manager called &amp;rsquo;n&amp;rsquo; and could not integrate Sass in anyway with my Ember app. It all boiled down to my Ember installation not finding libraries needed to compile Sass. These two modules were the reason of the problem: node-gyp and node-sass.
After fiddling around for a while I found out the proper way to setup Sass with Ember.</description><content>&lt;p>Trying to set up Sass with Ember can be quiet problematic if you are using a version manager for Node. For example I was using a version manager called &amp;rsquo;n&amp;rsquo; and could not integrate Sass in anyway with my Ember app. It all boiled down to my Ember installation not finding libraries needed to compile Sass. These two modules were the reason of the problem: node-gyp and node-sass.&lt;/p>
&lt;p>After fiddling around for a while I found out the proper way to setup Sass with Ember. First, ensure these are not installed in the project&amp;rsquo;s node_modules:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm uninstall node-gyp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm uninstall node-sass
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then install them again with the right version on Node:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># switch to the latest version of Node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install -g node-gyp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install -g node-sass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># this will install Ember addons for Sass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ember install ember-cli-sass
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>If Gitignore does not ignore</title><link>/posts/2015-04-15-if-gitignore-does-not-ignore/</link><pubDate>Wed, 15 Apr 2015 11:03:31 +0000</pubDate><guid>/posts/2015-04-15-if-gitignore-does-not-ignore/</guid><description>Sometimes after changing your .gitignore the new (un)ignored files don&amp;rsquo;t get get behind the scenes, as you would have expected. The reason behind this is you have already committed the files that you added to .gitignore and now git is tracking the files. Unless you delete them git will keep an eye on any changes on those files as it would do with any other. To get the new .gitignore rule registered with the repo you will have to manually remove tho file(s) from git&amp;rsquo;s cache.</description><content>&lt;p>Sometimes after changing your .gitignore the new (un)ignored files don&amp;rsquo;t get get behind the scenes, as you would have expected. The reason behind this is you have already committed the files that you added to .gitignore and now git is tracking the files. Unless you delete them git will keep an eye on any changes on those files as it would do with any other. To get the new .gitignore rule registered with the repo you will have to manually remove tho file(s) from git&amp;rsquo;s cache. So here is what you need to do:&lt;/p>
&lt;p>First of all, YOU MUST COMMIT any staged progress, otherwise they will get lost.&lt;/p>
&lt;p>Then you can go on to removing the problematic files from git&amp;rsquo;s tracking. For only one file, you will have to run this commad and that&amp;rsquo;s it. Git will smartly ignore whatever you tell it to ignore:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git rm -r --cached &amp;lt;file&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But in case you have way too many files to mention one by one, you might want to remove all the files at once. In this case git will stop tracking all files, so you will also have to add them once again manually.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git rm -r --cached &amp;lt;file&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lastly, simply commit again:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;fixed .gitignore&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tada, problem solved! If you ever want to undo this, just add the file to git:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git add &amp;lt;file&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>